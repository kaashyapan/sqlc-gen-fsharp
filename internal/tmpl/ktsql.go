package tmpl

import (
	"io"

	"github.com/kaashyapan/sqlc-gen-fsharp/internal/core"
)

func KtSQL(w io.Writer, dot core.KtTmplCtx) (err error) {
	defer func() {
		if recovered := recover(); recovered != nil {
			var ok bool
			if err, ok = recovered.(error); !ok {
				panic(recovered)
			}
		}
	}()
	return ktSQLTmpl(w, dot)
}

func ktSQLTmpl(w io.Writer, dot core.KtTmplCtx) error {
	topdot := dot
	_, _ = io.WriteString(w, "// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc ")
	_, _ = io.WriteString(w, dot.SqlcVersion)
	_, _ = io.WriteString(w, "\n\npackage ")
	_, _ = io.WriteString(w, dot.Package)
	_, _ = io.WriteString(w, "\n\n")
	if eval := core.Imports(dot.SourceName); len(eval) != 0 {
		for _, dot := range eval {
			_ = dot
			_, _ = io.WriteString(w, "\n")
			if eval := dot; len(eval) != 0 {
				for _, dot := range eval {
					_ = dot
					_, _ = io.WriteString(w, "import ")
					_, _ = io.WriteString(w, dot)
					_, _ = io.WriteString(w, "\n")
				}
			}
			_, _ = io.WriteString(w, "\n")
		}
	}
	if eval := dot.Queries; len(eval) != 0 {
		for _, dot := range eval {
			_ = dot
			_, _ = io.WriteString(w, "const val ")
			_, _ = io.WriteString(w, dot.ConstantName)
			_, _ = io.WriteString(w, " = ")
			_, _ = io.WriteString(w, topdot.Q)
			_, _ = io.WriteString(w, "-- name: ")
			_, _ = io.WriteString(w, dot.MethodName)
			_, _ = io.WriteString(w, " ")
			_, _ = io.WriteString(w, dot.Cmd)
			_, _ = io.WriteString(w, "\n")
			_, _ = io.WriteString(w, dot.SQL)
			_, _ = io.WriteString(w, "\n")
			_, _ = io.WriteString(w, topdot.Q)
			_, _ = io.WriteString(w, "\n\n")

			if dot.Ret.EmitStruct() {
				_, _ = io.WriteString(w, "data class ")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, " (")
				if eval := dot.Ret.Struct.Fields; len(eval) != 0 {
					for i, dot := range eval {
						_ = dot
						if i > 0 {
							_, _ = io.WriteString(w, ",")
						}
						_, _ = io.WriteString(w, "\n  val ")
						_, _ = io.WriteString(w, dot.Name)
						_, _ = io.WriteString(w, ": ")
						_, _ = io.WriteString(w, dot.Type.String())
					}
				}
				_, _ = io.WriteString(w, "\n)\n\n")
			}
		}
	}

	_, _ = io.WriteString(w, "\nclass QueriesImpl(private val conn: Connection) : Queries {")
	if eval := dot.Queries; len(eval) != 0 {
		for _, dot := range eval {
			_ = dot
			if dot.Cmd == ":one" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}
				_, _ = io.WriteString(w, "\n\n  @Throws(SQLException::class)")
				_, _ = io.WriteString(w, "\n  override fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): ")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, "? {")

				_, _ = io.WriteString(w, "\n    return conn.prepareStatement(")
				_, _ = io.WriteString(w, dot.ConstantName)
				_, _ = io.WriteString(w, ").use { stmt ->")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, dot.Arg.Bindings())

				_, _ = io.WriteString(w, "\n\n      val results = stmt.executeQuery()")
				_, _ = io.WriteString(w, "\n      if (!results.next()) {")
				_, _ = io.WriteString(w, "\n        return null")
				_, _ = io.WriteString(w, "\n      }")

				_, _ = io.WriteString(w, "\n      val ret = ")
				_, _ = io.WriteString(w, dot.Ret.ResultSet())
				_, _ = io.WriteString(w, "\n      if (results.next()) {")
				_, _ = io.WriteString(w, "\n          throw SQLException(\"expected one row in result set, but got many\")")
				_, _ = io.WriteString(w, "\n      }")
				_, _ = io.WriteString(w, "\n      ret")
				_, _ = io.WriteString(w, "\n    }")
				_, _ = io.WriteString(w, "\n  }")
			}
			if dot.Cmd == ":many" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}
				_, _ = io.WriteString(w, "\n\n  @Throws(SQLException::class)")
				_, _ = io.WriteString(w, "\n  override fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): List<")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, "> {")

				_, _ = io.WriteString(w, "\n    return conn.prepareStatement(")
				_, _ = io.WriteString(w, dot.ConstantName)
				_, _ = io.WriteString(w, ").use { stmt ->")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, dot.Arg.Bindings())

				_, _ = io.WriteString(w, "\n\n      val results = stmt.executeQuery()")
				_, _ = io.WriteString(w, "\n      val ret = mutableListOf<")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, ">()")

				_, _ = io.WriteString(w, "\n      while (results.next()) {")
				_, _ = io.WriteString(w, "\n          ret.add(")
				_, _ = io.WriteString(w, dot.Ret.ResultSet())
				_, _ = io.WriteString(w, ")")
				_, _ = io.WriteString(w, "\n      }")
				_, _ = io.WriteString(w, "\n      ret")
				_, _ = io.WriteString(w, "\n    }")
				_, _ = io.WriteString(w, "\n  }")
			}
			if dot.Cmd == ":exec" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}
				_, _ = io.WriteString(w, "\n\n  @Throws(SQLException::class)")
				if topdot.EmitInterface {
					_, _ = io.WriteString(w, "override ")
				}
				_, _ = io.WriteString(w, "\n  override fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, ") {")

				_, _ = io.WriteString(w, "\n    conn.prepareStatement(")
				_, _ = io.WriteString(w, dot.ConstantName)
				_, _ = io.WriteString(w, ").use { stmt ->")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, dot.Arg.Bindings())

				_, _ = io.WriteString(w, "\n\n      stmt.execute()")
				_, _ = io.WriteString(w, "\n    }")
				_, _ = io.WriteString(w, "\n  }")
			}
			if dot.Cmd == ":execrows" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}
				_, _ = io.WriteString(w, "\n\n  @Throws(SQLException::class)")
				if topdot.EmitInterface {
					_, _ = io.WriteString(w, "override ")
				}
				_, _ = io.WriteString(w, "\n  override fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): Int {")

				_, _ = io.WriteString(w, "\n    conn.prepareStatement(")
				_, _ = io.WriteString(w, dot.ConstantName)
				_, _ = io.WriteString(w, ").use { stmt ->")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, dot.Arg.Bindings())

				_, _ = io.WriteString(w, "\n\n      stmt.execute()")
				_, _ = io.WriteString(w, "\n\n      stmt.updateCount")
				_, _ = io.WriteString(w, "\n    }")
				_, _ = io.WriteString(w, "\n  }")
			}
			if dot.Cmd == ":execresult" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}
				_, _ = io.WriteString(w, "\n\n  @Throws(SQLException::class)")
				if topdot.EmitInterface {
					_, _ = io.WriteString(w, "override ")
				}
				_, _ = io.WriteString(w, "\n  override fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): Long {")

				_, _ = io.WriteString(w, "\n    return conn.prepareStatement(")
				_, _ = io.WriteString(w, dot.ConstantName)
				_, _ = io.WriteString(w, ", Statement.RETURN_GENERATED_KEYS).use { stmt ->")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, dot.Arg.Bindings())

				_, _ = io.WriteString(w, "\n\n      stmt.execute()")
				_, _ = io.WriteString(w, "\n\n      val results = stmt.generatedKeys")
				_, _ = io.WriteString(w, "\n      if (!results.next()) {")
				_, _ = io.WriteString(w, "\n          throw SQLException(\"no generated key returned\")")
				_, _ = io.WriteString(w, "\n      }")
				_, _ = io.WriteString(w, "\n	  results.getLong(1)")

				_, _ = io.WriteString(w, "\n    }")
				_, _ = io.WriteString(w, "\n  }")
			}
		}
	}
	_, _ = io.WriteString(w, "\n\n}\n")
	return nil
}
