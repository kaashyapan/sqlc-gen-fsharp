package tmpl

import (
	"io"

	"github.com/kaashyapan/sqlc-gen-fsharp/internal/core"
)

func KtIface(w io.Writer, dot core.KtTmplCtx) (err error) {
	defer func() {
		if recovered := recover(); recovered != nil {
			var ok bool
			if err, ok = recovered.(error); !ok {
				panic(recovered)
			}
		}
	}()
	return ktIfaceTmpl(w, dot)
}

func ktIfaceTmpl(w io.Writer, dot core.KtTmplCtx) error {
	_, _ = io.WriteString(w, "// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc ")
	_, _ = io.WriteString(w, dot.SqlcVersion)
	_, _ = io.WriteString(w, "\n\npackage ")
	_, _ = io.WriteString(w, dot.Package)
	_, _ = io.WriteString(w, "\n\n")
	if eval := core.Imports(dot.SourceName); len(eval) != 0 {
		for _, dot := range eval {
			_ = dot
			_, _ = io.WriteString(w, "\n")
			if eval := dot; len(eval) != 0 {
				for _, dot := range eval {
					_ = dot
					_, _ = io.WriteString(w, "import ")
					_, _ = io.WriteString(w, dot)
					_, _ = io.WriteString(w, "\n")
				}
			}
			_, _ = io.WriteString(w, "\n")
		}
	}
	_, _ = io.WriteString(w, "\n\ninterface Queries {")
	if eval := dot.Queries; len(eval) != 0 {
		for _, dot := range eval {
			_ = dot
			_, _ = io.WriteString(w, "\n  @Throws(SQLException::class)")
			if dot.Cmd == ":one" {
				_, _ = io.WriteString(w, "\n  fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): ")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, "?")
			}
			if dot.Cmd == ":many" {
				_, _ = io.WriteString(w, "\n  fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): List<")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, ">")
			}
			if dot.Cmd == ":exec" {
				_, _ = io.WriteString(w, "\n  fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, ")")
			}
			if dot.Cmd == ":execrows" {
				_, _ = io.WriteString(w, "\n  fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): Int")
			}
			if dot.Cmd == ":execresult" {
				_, _ = io.WriteString(w, "\n  fun ")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, "): Long")
			}
			_, _ = io.WriteString(w, "\n  ")
		}
	}
	_, _ = io.WriteString(w, "\n}\n\n")
	return nil
}
