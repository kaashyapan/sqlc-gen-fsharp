package tmpl

import (
	"io"

	"github.com/kaashyapan/sqlc-gen-fsharp/internal/core"
	"github.com/kaashyapan/sqlc-gen-fsharp/internal/templates"
)

func SQL(w io.Writer, dot core.TmplCtx) (err error) {
	defer func() {
		if recovered := recover(); recovered != nil {
			var ok bool
			if err, ok = recovered.(error); !ok {
				panic(recovered)
			}
		}
	}()

	if dot.Settings.Engine == "mysql" {
		return nil
	}

	templates.WriteQueries(w, dot)
	return nil
	//return fsSQLTmpl(w, dot)
}

func fsSQLTmpl(w io.Writer, dot core.TmplCtx) error {
	ctx := dot
	_, _ = io.WriteString(w, "// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc ")
	_, _ = io.WriteString(w, dot.SqlcVersion)
	_, _ = io.WriteString(w, "\n\nmodule ")
	_, _ = io.WriteString(w, dot.Package)
	_, _ = io.WriteString(w, ".Queries ")
	_, _ = io.WriteString(w, "\n\n")

	for _, dot := range core.Imports(dot.SourceName, dot.Package) {
		_ = dot
		_, _ = io.WriteString(w, "\n")
		_ = dot
		_, _ = io.WriteString(w, "open ")
		_, _ = io.WriteString(w, dot)

	}
	_, _ = io.WriteString(w, "\n\n")

	if eval := dot.Queries; len(eval) != 0 {
		for _, dot := range eval {
			_ = dot
			if eval := dot.Comments; len(eval) != 0 {
				_, _ = io.WriteString(w, "\n")
				for _, dot := range eval {
					_ = dot
					_, _ = io.WriteString(w, "\n//")
					_, _ = io.WriteString(w, dot)
				}
			}
			_, _ = io.WriteString(w, "let [<Literal>] ")
			_, _ = io.WriteString(w, dot.ConstantName)
			_, _ = io.WriteString(w, " = ")
			_, _ = io.WriteString(w, ctx.Q)
			_, _ = io.WriteString(w, "\n-- name: ")
			_, _ = io.WriteString(w, dot.MethodName)
			_, _ = io.WriteString(w, " ")
			_, _ = io.WriteString(w, dot.Cmd)
			_, _ = io.WriteString(w, "\n")
			_, _ = io.WriteString(w, dot.SQL)
			_, _ = io.WriteString(w, "\n")
			_, _ = io.WriteString(w, ctx.Q)
			_, _ = io.WriteString(w, "\n\n")

			if dot.Ret.EmitStruct() {
				_, _ = io.WriteString(w, "data class ")
				_, _ = io.WriteString(w, dot.Ret.Type())
				_, _ = io.WriteString(w, " (")
				if eval := dot.Ret.Struct.Fields; len(eval) != 0 {
					for i, dot := range eval {
						_ = dot
						if i > 0 {
							_, _ = io.WriteString(w, ",")
						}
						_, _ = io.WriteString(w, "\n  val ")
						_, _ = io.WriteString(w, dot.Name)
						_, _ = io.WriteString(w, ": ")
						_, _ = io.WriteString(w, dot.Type.String())
					}
				}
				_, _ = io.WriteString(w, "\n)\n\n")
			}
		}
	}

	if dot.Settings.Engine == "mysql" {
		return nil
	}

	if eval := dot.Queries; len(eval) != 0 {
		_, _ = io.WriteString(w, "\ntype Queries(conn: string) = ")
		_, _ = io.WriteString(w, "\n    ")

		for _, dot := range eval {
			_ = dot
			if dot.Cmd == ":one" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}

				_, _ = io.WriteString(w, "\n\n    member this.")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, ") =")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, core.ExecCommand(ctx, dot))
				_, _ = io.WriteString(w, " ")

			}
			if dot.Cmd == ":many" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}
				_, _ = io.WriteString(w, "\n\n    member this.")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, ") =")

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, core.ExecCommand(ctx, dot))
				_, _ = io.WriteString(w, " ")

			}
			if dot.Cmd == ":exec" {
				if eval := dot.Comments; len(eval) != 0 {
					_, _ = io.WriteString(w, "\n")
					for _, dot := range eval {
						_ = dot
						_, _ = io.WriteString(w, "\n//")
						_, _ = io.WriteString(w, dot)
					}
				}

				_, _ = io.WriteString(w, "\n\n    member this.")
				_, _ = io.WriteString(w, dot.MethodName)
				_, _ = io.WriteString(w, "(")
				_, _ = io.WriteString(w, dot.Arg.Args())
				_, _ = io.WriteString(w, ") =")

				conn := ctx.ConnString()
				for _, line := range conn {
					_, _ = io.WriteString(w, line)
				}

				pipelines := ctx.ConnPipeline(dot)
				for _, line := range pipelines {
					_, _ = io.WriteString(w, line)
				}

				_, _ = io.WriteString(w, "\n      ")
				_, _ = io.WriteString(w, core.ExecCommand(ctx, dot))

			}

		}
	}
	_, _ = io.WriteString(w, "\n\n")
	return nil
}
