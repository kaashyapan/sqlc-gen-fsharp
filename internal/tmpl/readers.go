package tmpl

import (
	"io"

	"github.com/kaashyapan/sqlc-gen-fsharp/internal/core"
	"github.com/kaashyapan/sqlc-gen-fsharp/internal/templates"
)

func Reader(w io.Writer, dot core.TmplCtx) (err error) {
	defer func() {
		if recovered := recover(); recovered != nil {
			var ok bool
			if err, ok = recovered.(error); !ok {
				panic(recovered)
			}
		}
	}()

	if dot.Settings.Engine != "mysql" {
		templates.WriteReaders(w, dot)
	}
	return nil
	//return fsReaderTmpl(w, dot)
}

func fsReaderTmpl(w io.Writer, dot core.TmplCtx) error {
	if dot.Settings.Engine == "mysql" {
		return nil
	}
	_, _ = io.WriteString(w, "// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc ")
	_, _ = io.WriteString(w, dot.SqlcVersion)
	_, _ = io.WriteString(w, dot.Package)
	_, _ = io.WriteString(w, "\n\nmodule ")
	_, _ = io.WriteString(w, dot.Package)
	_, _ = io.WriteString(w, ".Readers ")

	_, _ = io.WriteString(w, "\n")
	for _, dot := range core.Imports(dot.SourceName, dot.Package) {
		_ = dot
		_, _ = io.WriteString(w, "\n")
		_ = dot
		_, _ = io.WriteString(w, "open ")
		_, _ = io.WriteString(w, dot)

	}
	_, _ = io.WriteString(w, "\n\n")

	readerCnt := len(dot.ReaderSet())
	if readerCnt > 0 {
		for _, dot := range dot.ReaderSet() {
			_, _ = io.WriteString(w, "\n")
			_, _ = io.WriteString(w, dot)
			_, _ = io.WriteString(w, "\n")

		}
	}

	return nil
}
