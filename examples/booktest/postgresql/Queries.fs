// Code generated by sqlc. DO NOT EDIT.
// version: sqlc v1.18.0
// for nuget package Npgsql.FSharp --version 5.7.0

namespace Booktest

open System
open Npgsql
open Npgsql.FSharp
open Booktest.Readers

module Sqls = 

  [<Literal>]
  let getAuthor =
    """
    SELECT author_id, name FROM authors
WHERE author_id = @author_id
  """

  [<Literal>]
  let getBook =
    """
    SELECT book_id, author_id, isbn, book_type, title, year, available, tags FROM books
WHERE book_id = @book_id
  """

  [<Literal>]
  let deleteBook =
    """
    DELETE FROM books
WHERE book_id = @book_id
  """

  [<Literal>]
  let booksByTitleYear =
    """
    SELECT book_id, author_id, isbn, book_type, title, year, available, tags FROM books
WHERE title = @title AND year = @year
  """

  [<Literal>]
  let booksByTags =
    """
    SELECT 
  book_id,
  title,
  name,
  isbn,
  tags
FROM books
LEFT JOIN authors ON books.author_id = authors.author_id
WHERE tags && @::varchar[]
  """

  [<Literal>]
  let createAuthor =
    """
    INSERT INTO authors (name) VALUES (@name)
RETURNING author_id, name
  """

  [<Literal>]
  let createBook =
    """
    INSERT INTO books (
    author_id,
    isbn,
    book_type,
    title,
    year,
    available,
    tags
) VALUES (
    @author_id,
    @isbn,
    @book_type,
    @title,
    @year,
    @available,
    @tags
)
RETURNING book_id, author_id, isbn, book_type, title, year, available, tags
  """

  [<Literal>]
  let updateBook =
    """
    UPDATE books
SET title = @title, tags = @tags
WHERE book_id = @book_id
  """

  [<Literal>]
  let updateBookISBN =
    """
    UPDATE books
SET title = @title, tags = @tags, isbn = @isbn
WHERE book_id = @book_id
  """

[<RequireQualifiedAccessAttribute>]
type DB (conn: string) =
  // https://www.connectionstrings.com/npgsql

  member this.getAuthor  (authorId: int) =

    let parameters = [ ("author_id", Sql.int authorId) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.getAuthor
    |> Sql.parameters parameters
    |> Sql.executeRow authorReader

  member this.getBook  (bookId: int) =

    let parameters = [ ("book_id", Sql.int bookId) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.getBook
    |> Sql.parameters parameters
    |> Sql.executeRow bookReader

  member this.deleteBook  (bookId: int) =

    let parameters = [ ("book_id", Sql.int bookId) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.deleteBook
    |> Sql.parameters parameters
    |> Sql.executeNonQuery

  member this.booksByTitleYear  (title: string, year: int) =

    let parameters = [ ("title", Sql.text title); ("year", Sql.int year) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.booksByTitleYear
    |> Sql.parameters parameters
    |> Sql.execute bookReader

  member this.booksByTags  (dollar1: List&lt;string&gt;) =

    let parameters = [ ("", Sql.string dollar1) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.booksByTags
    |> Sql.parameters parameters
    |> Sql.execute booksByTagsRowReader

  member this.createAuthor  (name: string) =

    let parameters = [ ("name", Sql.text name) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.createAuthor
    |> Sql.parameters parameters
    |> Sql.executeRow authorReader

  member this.createBook  (authorId: int, isbn: string, bookType: book_type, title: string, year: int, available: DateTimeOffset, tags: List&lt;string&gt;) =

    let parameters = [ ("author_id", Sql.int authorId); ("isbn", Sql.text isbn); ("book_type", Sql.book_type_unhandled_report_issue bookType); ("title", Sql.text title); ("year", Sql.int year); ("available", Sql.timestamptz available); ("tags", Sql.string tags) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.createBook
    |> Sql.parameters parameters
    |> Sql.executeRow bookReader

  member this.updateBook  (title: string, tags: List&lt;string&gt;, bookId: int) =

    let parameters = [ ("title", Sql.text title); ("tags", Sql.string tags); ("book_id", Sql.int bookId) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.updateBook
    |> Sql.parameters parameters
    |> Sql.executeNonQuery

  member this.updateBookISBN  (title: string, tags: List&lt;string&gt;, bookId: int, isbn: string) =

    let parameters = [ ("title", Sql.text title); ("tags", Sql.string tags); ("book_id", Sql.int bookId); ("isbn", Sql.text isbn) ]
    
    conn
    |> Sql.connect
    |> Sql.query Sqls.updateBookISBN
    |> Sql.parameters parameters
    |> Sql.executeNonQuery

