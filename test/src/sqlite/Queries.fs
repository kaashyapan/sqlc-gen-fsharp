// Code generated by sqlc. DO NOT EDIT.
// version: sqlc v1.18.0
// for nuget package Fumble --version 1.0.1

namespace SAuthors

open System
open Fumble
open SAuthors.Readers

module Sqls =

  [<Literal>]
  let getAuthor2 =
    """
    SELECT id, name, bio FROM authors
WHERE id = @id LIMIT 1
  """

  [<Literal>]
  let getAuthor =
    """
    SELECT id, name, bio, address, date_of_birth, last_ts, savings_amt, loan_amt, disabled, married, payable FROM authors
WHERE id = @id LIMIT 1
  """

  [<Literal>]
  let listAuthors =
    """
    SELECT id, name, bio, address, date_of_birth, last_ts, savings_amt, loan_amt, disabled, married, payable FROM authors
ORDER BY name
  """

  [<Literal>]
  let createAuthor =
    """
    INSERT INTO authors (
  name, bio
) VALUES (
  @name, @bio
)
RETURNING id, name, bio, address, date_of_birth, last_ts, savings_amt, loan_amt, disabled, married, payable
  """

  [<Literal>]
  let deleteAuthor =
    """
    DELETE FROM authors
WHERE id = @id
  """

  [<Literal>]
  let countAuthors =
    """
    SELECT count(*) as cnt from authors
  """

  [<Literal>]
  let totalBooks =
    """
    SELECT count(*) as cnt, sum(id) as total_books from authors
  """

  [<Literal>]
  let dbString =
    """
    SELECT 'Hello world' as str
  """

[<RequireQualifiedAccessAttribute>]
type DB(conn: string) =
  // https://www.connectionstrings.com/sqlite-net-provider

  member this.getAuthor2(id: int) =

    let parameters = [ ("id", Sql.int id) ]

    conn
    |> Sql.connect
    |> Sql.query Sqls.getAuthor2
    |> Sql.parameters parameters
    |> Sql.execute getAuthor2RowReader

  member this.getAuthor(id: int) =

    let parameters = [ ("id", Sql.int id) ]

    conn
    |> Sql.connect
    |> Sql.query Sqls.getAuthor
    |> Sql.parameters parameters
    |> Sql.execute authorReader

  member this.listAuthors() =

    conn |> Sql.connect |> Sql.query Sqls.listAuthors |> Sql.execute authorReader

  member this.createAuthor(name: string, ?bio: string) =

    let parameters = [ ("name", Sql.string name); ("bio", Sql.stringOrNone bio) ]

    conn
    |> Sql.connect
    |> Sql.query Sqls.createAuthor
    |> Sql.parameters parameters
    |> Sql.execute authorReader

  member this.deleteAuthor(id: int) =

    let parameters = [ ("id", Sql.int id) ]

    conn
    |> Sql.connect
    |> Sql.query Sqls.deleteAuthor
    |> Sql.parameters parameters
    |> Sql.executeNonQuery

  member this.countAuthors() =

    conn
    |> Sql.connect
    |> Sql.query Sqls.countAuthors
    |> Sql.execute (fun r -> r.int "cnt")

  member this.totalBooks() =

    conn
    |> Sql.connect
    |> Sql.query Sqls.totalBooks
    |> Sql.execute totalBooksRowReader

  member this.dbString() =

    conn
    |> Sql.connect
    |> Sql.query Sqls.dbString
    |> Sql.execute (fun r -> r.string "str")
